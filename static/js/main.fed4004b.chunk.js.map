{"version":3,"sources":["Header.js","Paragraph.js","Square.js","People.js","Clicked.js","Toggle.js","Counter.js","StepCounter.js","Catch.js","Length.js","Password.js","TempConverter.js","Footer.js","FourOhFour.js","Stuff.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","this","props","text","Component","Paragraph","children","defaultProps","Square","state","clicked","handleClick","bind","setState","color","style","height","width","backgroundColor","onClick","People","console","log","names","map","name","index","key","Clicked","Toggle","initial","alternate","Counter","counter","handleClickIncrement","handleClickDecrease","max","StepCounter","step","Catch","position","jump","divStyle","top","Length","value","handleChange","e","currentTarget","length","onChange","Password","event","newValue","background","calculateColoe","type","Temperature","celcius","fahrenheit","handleChangeCelcius","handleChangeFahrenheit","toFixed","Footer","link","listItem","to","FourOhFour","Stuff","path","render","match","params","component","App","square","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sRAceA,E,iLATP,OAAO,yBAAKC,UAAU,6BACtB,yBAAKA,UAAU,aAAf,IAA4B,wBAAIA,UAAU,aAAcC,KAAKC,MAAMC,Y,GAHtDC,aCAfC,E,iLAEE,OAAO,2BAAKJ,KAAKC,MAAMI,c,GAFPF,aAQxBC,EAAUE,aAAe,CACtBD,SAAU,sCAIED,Q,OCbTG,E,YAEF,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KAEDO,MAAQ,CACTC,SAAQ,GAGZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPJ,E,2EAWfX,KAAKY,SAAS,CAAEH,SAAST,KAAKQ,MAAMC,Y,+BAG/B,IACAA,EAAWT,KAAKQ,MAAhBC,QACAI,EAASb,KAAKC,MAAdY,MAGCC,EAAQ,CACVC,OAAQ,IACRC,MAAO,IACPC,gBAAiBR,EAAUI,EAAQ,UAIvC,OACI,oCACI,6CACA,yBAAKK,QAAUlB,KAAKU,YAAcI,MAAQA,S,GA/BrCX,aAwCrBI,EAAOD,aAAe,CAClBO,MAAO,WA+BIN,QCpCAY,E,sLA/BPC,QAAQC,IAAI,iB,+BAGN,IACAC,EAAUtB,KAAKC,MAAfqB,MAEN,OAAOA,EACP,wBAAIvB,UAAU,cAAcmB,QAAUlB,KAAKU,aAErCY,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACR,wBAAIC,IAAMD,GAAV,IAAsBD,EAAtB,SAID,sD,GAjBMrB,aCyBNwB,E,YA1BX,WAAY1B,GAAQ,IAAD,8BACf,4CAAMA,KAEDO,MAAQ,CACTC,SAAQ,GAGZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPJ,E,2EAWXX,KAAKY,SAAS,CAAEH,SAAST,KAAKQ,MAAMC,Y,+BAGnC,IACAA,EAAWT,KAAKQ,MAAhBC,QAEL,OACI,uBAAGS,QAAUlB,KAAKU,aAChBD,EAAU,UAAY,mB,GArBdN,aCkCPyB,E,YAhCX,WAAY3B,GAAQ,IAAD,8BACf,4CAAMA,KAEDO,MAAQ,CACTC,SAAQ,GAGZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPJ,E,2EAWPX,KAAKY,SAAS,CAAEH,SAAST,KAAKQ,MAAMC,Y,+BAIvC,IACAA,EAAWT,KAAKQ,MAAhBC,QACAoB,EAAW7B,KAAKC,MAAhB4B,QACAC,EAAa9B,KAAKC,MAAlB6B,UAEL,OACI,oCACA,4BAAQZ,QAAUlB,KAAKU,cACvB,2BACED,EAAUoB,EAAUC,Q,GA1Bb3B,aC+CN4B,E,YA7CX,WAAY9B,GAAQ,IAAD,8BACf,4CAAMA,KAEDO,MAAQ,CACTwB,QAAS,EAAK/B,MAAM4B,SAGxB,EAAKI,qBAAuB,EAAKA,qBAAqBtB,KAA1B,gBAC5B,EAAKuB,oBAAsB,EAAKA,oBAAoBvB,KAAzB,gBARZ,E,oFAcPX,KAAKQ,MAAMwB,QAAUhC,KAAKC,MAAMkC,KAChCnC,KAAKY,SAAS,CAAEoB,QAAShC,KAAKQ,MAAMwB,QAAU,M,4CAM5ChC,KAAKQ,MAAMwB,QAAU,GACrBhC,KAAKY,SAAS,CAAEoB,QAAShC,KAAKQ,MAAMwB,QAAU,M,+BAMnD,IACGA,EAAYhC,KAAKQ,MAAjBwB,QAER,OACI,oCACA,4BAAQd,QAAUlB,KAAKkC,qBAAvB,MACA,4BAAQhB,QAAUlB,KAAKiC,sBAAvB,MACA,2BACMD,Q,GAtCI7B,aC+CPiC,E,YA7CX,WAAYnC,GAAQ,IAAD,8BACf,4CAAMA,KAEDO,MAAQ,CACTwB,QAAS,GAGb,EAAKC,qBAAuB,EAAKA,qBAAqBtB,KAA1B,gBAC5B,EAAKuB,oBAAsB,EAAKA,oBAAoBvB,KAAzB,gBARZ,E,oFAaPX,KAAKQ,MAAMwB,QAAUhC,KAAKC,MAAMkC,KAChCnC,KAAKY,SAAS,CAAEoB,SAAUhC,KAAKQ,MAAMwB,UAAWhC,KAAKC,MAAMoC,S,4CAMzDrC,KAAKQ,MAAMwB,QAAU,GACrBhC,KAAKY,SAAS,CAAEoB,SAAUhC,KAAKQ,MAAMwB,SAAWhC,KAAKC,MAAMoC,S,+BAMhE,IACGL,EAAYhC,KAAKQ,MAAjBwB,QAGR,OACI,oCACA,4BAAQd,QAAUlB,KAAKkC,qBAAvB,MACA,4BAAQhB,QAAUlB,KAAKiC,sBAAvB,MACA,2BACMD,Q,GAtCQ7B,aCsCXmC,E,YApCX,WAAYrC,GAAQ,IAAD,8BACf,4CAAMA,KAEDO,MAAQ,CACT+B,SAAU,GAGd,EAAK7B,YAAc,EAAKA,YAAYC,KAAjB,gBAPJ,E,2EAWPX,KAAKY,SAAS,CAAE2B,SAAUvC,KAAKQ,MAAM+B,SAAWvC,KAAKC,MAAMuC,S,+BAK/D,IAAIC,EAAW,CAEXF,SAAU,WACVG,IAAK1C,KAAKQ,MAAM+B,UAGxB,OACI,oCACA,4BAAQrB,QAAUlB,KAAKU,YAAcI,MAAQ2B,GAA7C,4B,GA1BQtC,aC8BLwC,E,YA7BX,WAAY1C,GAAQ,IAAD,8BACf,4CAAMA,KAEDO,MAAQ,CACToC,MAAO,iBAGX,EAAKC,aAAe,EAAKA,aAAalC,KAAlB,gBAPL,E,0EAWFmC,GACT9C,KAAKY,SAAS,CAAEgC,MAAOE,EAAEC,cAAcH,U,+BAGjC,IAAD,OACGA,EAAU5C,KAAKQ,MAAfoC,MACR,OACI,0BAAM7C,UAAU,gBACR,sCAAY6C,EAAMI,QAClB,2BAAOjD,UAAU,eAAekD,SAAU,SAAAH,GAAC,OAAI,EAAKD,aAAaC,IACjEF,MAAQA,S,GAtBXzC,aCyDN+C,E,YAxDX,WAAYjD,GAAQ,IAAD,8BACf,4CAAMA,KAEDO,MAAQ,CACToC,MAAO,IAGX,EAAKC,aAAe,EAAKA,aAAalC,KAAlB,gBAPL,E,0EAYFwC,GACT,IAAMC,EAAWD,EAAMJ,cAAcH,MACrC5C,KAAKY,SAAS,CAAEgC,MAAOQ,M,4CAOvB,OAAkB,IAFLpD,KAAKQ,MAAMoC,MAAMI,OAER,GAAK,CACvBK,WAAYrD,KAAKsD,kB,+BAIf,IACEN,EAAWhD,KAAKQ,MAAMoC,MAAtBI,OAcFlC,EAAQ,CACVG,gBAXW,IAAX+B,EACQ,GACDA,EAAS,EACR,MACDA,EAAS,GACR,SAEA,SAQZ,OACI,oCACQ,2BAAOlC,MAAUA,EAAOyC,KAAK,WAAWN,SAAWjD,KAAK6C,oB,GAjDzD1C,aC4DRqD,E,YA3DX,WAAYvD,GAAQ,IAAD,8BACf,4CAAMA,KAEDO,MAAQ,CACTiD,QAAS,EACTC,WAAY,IAGZ,EAAKC,oBAAsB,EAAKA,oBAAoBhD,KAAzB,gBAC3B,EAAKiD,uBAAyB,EAAKA,uBAAuBjD,KAA5B,gBATnB,E,iFAYKwC,GAChB,IAAIP,GAASO,EAAMJ,cAAcH,MACjC5C,KAAKY,SAAS,CACV6C,QAASb,EACTc,YAAqB,IAARd,EAAc,IAAIiB,QAAQ,O,6CAKxBV,GACnB,IAAIP,GAASO,EAAMJ,cAAcH,MACjC5C,KAAKY,SAAS,CACV8C,WAAYd,EACZa,UAAWb,EAAQ,IAAM,KAAKiB,QAAQ,O,+BAQ1C,OACI,8BACI,0CACI,2BAAON,KAAK,SAASX,MAAO5C,KAAKQ,MAAMiD,QAASR,SAAWjD,KAAK2D,sBACpE,6CACI,2BAAOJ,KAAK,SAASX,MAAO5C,KAAKQ,MAAMkD,WAAYT,SAAWjD,KAAK4D,8B,GAvCjEzD,a,QCgCX2D,EAzBA,WAYX,OAEA,wBAAI/D,UAAU,cAZC,CAAC,CAAE6C,MAAO,OAAQmB,KAAK,SACtB,CAAEnB,MAAM,SAAUmB,KAAK,kBACvB,CAAEnB,MAAM,UAAWmB,KAAK,YACxB,CAAEnB,MAAO,SAAUmB,KAAK,WACxB,CAAEnB,MAAO,SAAUmB,KAAK,WACxB,CAAEnB,MAAM,cAAemB,KAAK,gBAC5B,CAAEnB,MAAM,SAAUmB,KAAK,WACvB,CAAEnB,MAAM,WAAYmB,KAAK,aACzB,CAAEnB,MAAM,cAAemB,KAAK,wBAK9BxC,KAAI,SAACyC,EAAUvC,GAAX,OACV,wBAAIC,IAAKD,EAAO1B,UAAU,mBACtB,kBAAC,IAAD,CAAMkE,GAAID,EAASD,MAAOC,EAASpB,aCnBpCsB,EAJI,kBACnB,yD,QCwFeC,EArEH,kBACJ,kBAAC,IAAD,KAGQ,kBAAC,EAAD,CAAQjE,KAAK,qBAEjB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOkE,KAAK,SACR,kBAAC,EAAD,qBAIJ,kBAAC,IAAD,CAAOA,KAAK,iBAAiBC,OAAS,gBAAGC,EAAH,EAAGA,MAAH,OAClC,kBAAC,EAAD,CAAQzD,MAAQyD,EAAMC,OAAO1D,WAOjC,kBAAC,IAAD,CAAOuD,KAAK,WACR,kBAAC,EAAD,CAAQ9C,MAAS,CAAC,SAAU,OAAQ,aAGxC,kBAAC,IAAD,CAAO8C,KAAK,WACR,kBAAC,EAAD,CAAQvC,QAAQ,QAAQC,UAAU,WAGtC,kBAAC,IAAD,CAAOsC,KAAK,YACR,kBAAC,EAAD,CAASvC,QAAU,GAAKM,IAAM,OAIlC,kBAAC,IAAD,CAAOiC,KAAK,0BAA0BC,OAAS,gBAAGC,EAAH,EAAGA,MAAH,OAC3C,kBAAC,EAAD,CAAanC,IAAMmC,EAAMC,OAAOpC,IAAME,KAAOiC,EAAMC,OAAOlC,UAQ9D,kBAAC,IAAD,CAAO+B,KAAK,UACR,kBAAC,EAAD,CAAO5B,KAAO,OAGlB,kBAAC,IAAD,CAAO4B,KAAK,eAAeI,UAAYhB,IAIvC,kBAAC,IAAD,CAAOY,KAAK,WAAWI,UAAY7C,IAEnC,kBAAC,IAAD,CAAOyC,KAAK,UAAUI,UAAY7B,IAElC,kBAAC,IAAD,CAAOyB,KAAK,YAAYI,UAAYtB,IAKhC,kBAAC,EAAD,OAGJ,kBAAC,EAAD,CAAQsB,UAAWV,MCxEpBW,EAPC,kBAGV,kBAAC,EAAD,CAAOC,QAAQ,KCGDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCZNS,IAASV,OAAO,kBAAC,EAAD,MAASW,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrE,QAAQqE,MAAMA,EAAMC,c","file":"static/js/main.fed4004b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n// we use className to add classes for Bootstrap styling\n\nclass Header extends Component {\n    render() {\n        return <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\"> <h1 className=\"display-4\">{ this.props.text }</h1>\n        </div>\n</div>\n    }\n}\n\n\n\nexport default Header;\n\n\n\n","import React, { Component } from \"react\";\n// we use className to add classes for Bootstrap styling\n\nclass Paragraph extends Component {\n    render() {\n        return <p>{ this.props.children }</p>;\n    }\n}\n\n\n\nParagraph.defaultProps = {\n   children: \"Hello and welcome to my React site\"\n    };\n\n\nexport default Paragraph;","import React, { Component} from \"react\";\n\n\nclass Square extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            clicked:false, \n        };\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        this.setState({ clicked:!this.state.clicked}) // ! changes it to the opposite and use set stateto put new value in state\n        }\n\n    render(){\n        let {clicked} = this.state;\n        let {color} = this.props;\n\n\n        const style = { // this is a variable and the properties below are inside. \n            height: 200,\n            width: 200,\n            backgroundColor: clicked ? color : \"orange\"\n\n        };\n\n        return (\n            <>\n                <p>Click the box!</p>\n                <div onClick={ this.handleClick } style={ style }></div> \n            </>\n        );\n            \n        }\n\n   \n}\n\nSquare.defaultProps = { \n    color: 'hotpink',\n}\n\n\n\n\n\n\n\n\n\n\n// function Square({ color }) { // passing in color through this parameter. \n\n//     const style = { // this is a variable and the properties below are inside. Think of it as a box.\n//         height: 200,\n//         width: 200,\n//         backgroundColor:color\n//     };\n\n//     return (\n//         <div style={ style }></div> // the {style} is taking the properties from above.\n//     );\n    \n// };\n\n// Square.defaultProps = { // this is default styling. If the color passed through is blank it will default to yellow.\n//     color: 'green',\n    \n// }\n\nexport default Square;","import React, { Component } from \"react\";\n// we use className to add classes for Bootstrap styling\n\n// let names = [\"James P. Sullivan\", \"Mike Wazowski\", \"Boo\", \"Randall Boggs\", \"Roz\", \"Fungus\"];\n\nclass People extends Component {\n\n    handleClick() {\n        console.log(\"hello world\");\n        }\n\n    render() {\n        let { names } = this.props;\n\n        return names ? ( \n        <ul className=\"People-List\" onClick={ this.handleClick }>                              \n  \n            { names.map((name, index) => (          \n                <li key={ index } > { name } </li>     \n            ))}\n        </ul>\n        \n           ) : <p>Nothing to see here</p> \n    }\n}\n\n\n\n// const People = ({ names }) => (\n//    names ? ( <ul>                              \n  \n//     { names.map((name, index) => (           // mapping over each name in the array in index order\n//         <li key={ index }> {name} </li>     // key to index so react know what name in array to display\n//     ))}\n//     </ul>\n\n//    ) : <p>Nothing to see here</p>           // this text will be displayed if no names are present\n// );\n\nexport default People;","import React, { Component } from \"react\";\n\nclass Clicked extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {      // this is what the state will be at the beggining in this case clicked false\n            clicked:false,\n        };\n\n        this.handleClick = this.handleClick.bind(this); \n    }\n        \n        handleClick() {\n            this.setState({ clicked:!this.state.clicked }) // this is what happens when its clicked in this case clicked.\n        }\n\n    render() { // what it's going to do on the browser. On click we do a ternary. if it's clicked display clicked if not display not clicked.\n        let {clicked} = this.state;\n\n        return (\n            <p onClick={ this.handleClick }>  \n            { clicked ? \"clicked\" : \"not clicked\"}\n            </p>\n        );\n    }\n}\n\n\nexport default Clicked;","import React, { Component } from \"react\";\n\nclass Toggle extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {      // this is what the state will be at the beggining in this case clicked false\n            clicked:false,\n        };\n\n        this.handleClick = this.handleClick.bind(this); \n    }\n        \n        handleClick() {\n                this.setState({ clicked:!this.state.clicked }) // this is what happens when its clicked in this case clicked.\n              }\n   \n\n    render() { // what it's going to do on the browser. On click we do a ternary. if it's clicked display clicked if not display not clicked.\n        let {clicked} = this.state;\n        let {initial} = this.props;\n        let {alternate} = this.props;\n\n        return (\n            <>\n            <button onClick={ this.handleClick }></button>\n            <p> \n            { clicked ? initial : alternate }\n            </p>\n            </>\n        );\n    }\n}\n\n\nexport default Toggle;","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {      // this is what the state will be at the beggining in this case clicked false\n            counter: this.props.initial\n        };\n\n        this.handleClickIncrement = this.handleClickIncrement.bind(this); \n        this.handleClickDecrease = this.handleClickDecrease.bind(this); \n        };\n        \n\n        handleClickIncrement() { // if statements are more effective here. \n\n            if (this.state.counter < this.props.max) {\n                this.setState({ counter: this.state.counter + 1 })\n              }\n        };\n            \n\n        handleClickDecrease() {\n              if (this.state.counter > 0) {\n                  this.setState({ counter: this.state.counter - 1 })\n              }\n            \n        };\n   \n\n    render() { // what it's going to do on the browser. On click we do a ternary. if it's clicked display clicked if not display not clicked.\n        const { counter } = this.state; // this is destructuring so below instead of putting this.state.counter all the time we can just put {counter}\n\n        return (\n            <>\n            <button onClick={ this.handleClickDecrease }>-1</button>\n            <button onClick={ this.handleClickIncrement }>+1</button>\n            <p> \n                { counter }\n            </p>\n            </>\n        );\n    }\n};\n\n\n\nexport default Counter;\n\n\n// two handle clicks and a += 1 method somewhere?","import React, { Component } from \"react\";\n\nclass StepCounter extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {      // this is what the state will be at the beggining in this case clicked false\n            counter: 0\n        };\n\n        this.handleClickIncrement = this.handleClickIncrement.bind(this); \n        this.handleClickDecrease = this.handleClickDecrease.bind(this); \n        };\n        \n\n        handleClickIncrement() {\n            if (this.state.counter < this.props.max) {\n                this.setState({ counter: +this.state.counter + +this.props.step })\n              }\n        };\n            \n\n        handleClickDecrease() {\n              if (this.state.counter > 0) {\n                  this.setState({ counter: +this.state.counter - +this.props.step })\n              }\n            \n        };\n   \n\n    render() { // what it's going to do on the browser. On click we do a ternary. if it's clicked display clicked if not display not clicked.\n        const { counter } = this.state;\n\n\n        return (\n            <>\n            <button onClick={ this.handleClickDecrease }>-1</button>\n            <button onClick={ this.handleClickIncrement }>+1</button>\n            <p> \n                { counter }\n            </p>\n            </>\n        );\n    }\n};\n\n\n\nexport default StepCounter;\n\n\n","import React, { Component } from \"react\";\n\nclass Catch extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {      // this is what the state will be at the beggining in this case clicked false\n            position: 0,\n        };\n\n        this.handleClick = this.handleClick.bind(this); \n    }\n        \n        handleClick() {\n                this.setState({ position: this.state.position + this.props.jump })\n\n        }\n\n        render() { \n            let divStyle = {\n        \n                position: 'relative',\n                top: this.state.position // using this in a template literal\n            };\n      \n        return (\n            <>\n            <button onClick={ this.handleClick } style={ divStyle }>Catch Me If You Can</button>\n            </>\n              );\n          }\n      };\n\n\n\n\n\n\n\nexport default Catch;","import React, { Component } from \"react\";\n\nclass Length extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: \"default input\"\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n\n    }\n\n        handleChange(e) {\n            this.setState({ value: e.currentTarget.value });\n        }\n\n        render() {\n            const { value } = this.state;\n            return (\n                <form className=\"form-control\">\n                        <p>Length: {value.length}</p>\n                        <input className=\"form-control\" onChange={e => this.handleChange(e)}\n                        value={ value}/>\n                </form>\n            );\n        }\n\n}\n\n\nexport default Length;","import React, { Component } from \"react\";\n\nclass Password extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: \"\",\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n\n    }\n\n\n        handleChange(event) {\n            const newValue = event.currentTarget.value;\n            this.setState({ value: newValue });\n        }\n\n\n        calculateBackground() {\n            let length = this.state.value.length;\n\n            return length === 0 ? {} : {\n                background: this.calculateColoe\n            }\n        }\n\n        render() {\n            const { length } = this.state.value;\n            \n            let color;\n\n            if (length === 0) {\n                color = \"\"\n            } else if (length < 9) {\n                color = \"red\";\n            } else if (length < 16) {\n                color = \"orange\";\n            } else {\n                color = \"green\";\n            }\n\n            const style = {\n                backgroundColor: color\n            }\n\n\n            return (\n                <>\n                        <input style = { style} type=\"password\" onChange={ this.handleChange }/>\n                </>\n            );\n        }\n\n}\n\n\nexport default Password;","import React, { Component } from \"react\";\n\nclass Temperature extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            celcius: 0,\n            fahrenheit: 32,\n        };\n\n            this.handleChangeCelcius = this.handleChangeCelcius.bind(this);\n            this.handleChangeFahrenheit = this.handleChangeFahrenheit.bind(this);\n    }   \n\n        handleChangeCelcius(event) { \n            let value = +event.currentTarget.value;\n            this.setState({\n                celcius: value,\n                fahrenheit: (value * 1.8 + 32).toFixed(2),\n            });\n\n        }\n\n        handleChangeFahrenheit(event) { \n            let value = +event.currentTarget.value;\n            this.setState({\n                fahrenheit: value,\n                celcius: ((value - 32) / 1.8).toFixed(2),\n            });\n\n        }\n\n\n\n        render() {\n            return (\n                <form>\n                    <label>Celcius</label>\n                        <input type=\"number\" value={this.state.celcius} onChange={ this.handleChangeCelcius }/>\n                    <label>Fahrenheit</label>\n                        <input type=\"number\" value={this.state.fahrenheit} onChange={ this.handleChangeFahrenheit }/>\n                </form>\n        );\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default Temperature;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Counter from \"./Counter\";\n\n\n\n\n\n\nconst Footer = () => {\n\n    let navItems = [{ value: \"Home\", link:\"/home\"},\n                    { value:\"Square\", link:\"/square/orange\"}, \n                    { value:\"Clicked\", link:\"/clicked\"},\n                    { value: \"People\", link:\"/people\" },\n                    { value: \"Toggle\", link:\"/toggle\" },\n                    { value:\"Temperature\", link:\"/temperature\" },\n                    { value:\"Length\", link:\"/length\" },\n                    { value:\"Password\", link:\"/password\"},\n                    { value:\"Stepcounter\", link:\"/stepcounter/100/10\"}]\n\n    return (\n\n    <ul className=\"list-group\">\n        {navItems.map((listItem, index)=>(\n            <li key={index} className=\"list-group-item\">\n                <Link to={listItem.link}>{listItem.value}</Link>\n            </li>\n        ))}\n    </ul>\n\n\n)};\n    \nexport default Footer;\n\n\n","import React from \"react\";\n\n\nconst FourOhFour = () => \n<p>Uh-oh! 404 Page not found</p>;\n\n\nexport default FourOhFour;","import React from 'react';\nimport './App.css';\nimport Header from \"./Header.js\";\nimport Paragraph from \"./Paragraph.js\";\nimport Square from \"./Square.js\";\nimport People from \"./People.js\";\nimport Clicked from \"./Clicked.js\";\nimport Toggle from \"./Toggle.js\";\nimport Counter from \"./Counter.js\";\nimport StepCounter from \"./StepCounter.js\";\nimport Catch from \"./Catch.js\";\nimport Length from \"./Length.js\";\nimport Password from \"./Password\";\nimport Temperature from \"./TempConverter\";\nimport Footer from \"./Footer\";\nimport FourOhFour from \"./FourOhFour\";\n// import Progress from \"./Progress\";\n// import Home from \"./Home\";\nimport {\n    BrowserRouter as Router, \n    Route, Switch\n} from \"react-router-dom\";\n\nlet Stuff = () => (\n        <Router>\n\n\n                <Header text=\"Josh's React App\" />\n\n            <Switch>\n                <Route path='/home'>\n                    <Paragraph>Hello World</Paragraph>\n                </Route>\n\n\n                <Route path=\"/square/:color\" render={ ({ match }) => (\n                    <Square color={ match.params.color } />\n                )}/>\n\n                {/* <Route path='/square'>\n                    {square ? <Square color=\"purple\" /> : null}\n                </Route> */}\n\n                <Route path='/people'>\n                    <People names = {[\"Sandra\", \"Josh\", \"Hagrid\"]}/>\n                </Route>\n\n                <Route path='/toggle'>\n                    <Toggle initial=\"Hello\" alternate=\"World\"/>\n                </Route>\n\n                <Route path='/counter'>\n                    <Counter initial={ 50 } max={ 100 } />\n                </Route>\n\n\n                <Route path=\"/stepcounter/:max/:step\" render={ ({ match }) => (\n                    <StepCounter max={ match.params.max } step={ match.params.step }/>\n                )}/>\n\n\n                {/* <Route path='/stepcounter'>\n                    <StepCounter max={ 100 } step={ 5 } />\n                </Route> */}\n\n                <Route path='/catch'>\n                    <Catch jump={ 100 } />\n                </Route>\n\n                <Route path='/temperature' component={ Temperature }/>\n\n                {/* <Route path='/paragraph' component={ Paragraph }/> */}\n\n                <Route path='/clicked' component={ Clicked }/>\n\n                <Route path='/length' component={ Length }/>\n\n                <Route path='/password' component={ Password }/>\n\n                {/* <Route path='/progress' component={ Progress }/> */}\n\n                {/* <Route exact path=\"/\" component={ FourOhFour }/> */}\n                    <FourOhFour />\n            </Switch>\n\n                <Footer component={Footer}/>\n\n        </Router>\n            \n);\n\n\nexport default Stuff;","import React from 'react';\nimport './App.css';\nimport Stuff from \"./Stuff\"\n\n\n\n    const App = () => (\n      // put the header, paragraph and other components in empty divs using the <> and </>\n    \n      <Stuff square={true} />\n      \n      );\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}